@page "/dining-table"

@inject HttpClient httpClient
@inject IBaseRepository<CreateDiningTableRequest, UpdateDiningTableRequest, DiningTableResponse> diningTableRepository
@inject NavigationManager navigationManager
@inject ISnackbar snackbar
@inject IDialogService DialogService

<PageTitle>Dining Table</PageTitle>

<MudTable @ref="_table" T="DiningTableResponse" Items="@Elements" Dense="@dense" Hover="@hover" Bordered="false" Striped="false"
          Filter="new Func<DiningTableResponse,bool>(FilterFunc1)" @bind-SelectedItems="selectedItems" MultiSelection="true" SelectionChangeable="true" OnRowClick="OnRowClick" SelectOnRowClick="false">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Dining Tables</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudIconButton Icon="@Icons.Material.Outlined.Delete" Class="ml-4" OnClick="DeleteItems" />
        <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick="GoToAddPage" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Code</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Capacity</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Code">@context.Code</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Capacity">@context.Capacity</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private bool dense = true;
    private bool hover = true;
    private string searchString = "";
    private MudTable<DiningTableResponse> _table;
    private HashSet<DiningTableResponse> selectedItems = new HashSet<DiningTableResponse>();

    private IEnumerable<DiningTableResponse> Elements = new List<DiningTableResponse>();

    protected override async Task OnInitializedAsync()
    {
        LoadElements();
    }

    private async void LoadElements()
    {
        try
        {
            Elements = await diningTableRepository.GetAllAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private bool FilterFunc1(DiningTableResponse element) => FilterFunc(element, searchString);

    private bool FilterFunc(DiningTableResponse element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void GoToAddPage()
    {
        navigationManager.NavigateTo(Routes.DiningTableCreate);
    }

    private void OnRowClick(TableRowClickEventArgs<DiningTableResponse> args)
    {
        if (args.Item is not null)
        {
            navigationManager.NavigateTo($"{Routes.DiningTableUpdate}/{args.Item.Id}");
        }
    }

    private async Task DeleteItems()
    {
        if (!selectedItems.Any()) return;

        var parameters = new DialogParameters
        {
            { "Title", "Delete Item(s)" },
            { "Message", $"Are you sure you want to delete {selectedItems.Count} item(s)?" }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<ConfirmationDialog>("Delete Items", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                DeleteItemsRequest request = new DeleteItemsRequest { Ids = selectedItems.Select(e => e.Id).ToList() };
                await diningTableRepository.DeletesAsync(request);
                snackbar.Add("Successfully delete selected items.", Severity.Success);
                LoadElements();
            }
            catch (Exception ex)
            {
                snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }
}
