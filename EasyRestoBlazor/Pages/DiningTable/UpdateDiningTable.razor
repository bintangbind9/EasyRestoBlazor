@page "/dining-table/update/{Id}"

@inject HttpClient httpClient
@inject IBaseRepository<CreateDiningTableRequest, UpdateDiningTableRequest, DiningTableResponse> diningTableRepository
@inject NavigationManager navigationManager
@inject ISnackbar snackbar

<PageTitle>Update Dining Table</PageTitle>

<EditForm Model="@model" OnValidSubmit="Update">
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" aria-label="back" OnClick="GoBack" />
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Update Dining Table</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField Label="Code"
                          @bind-Value="obj.Code" Disabled="true" />
            <MudTextField Label="Name" Class="mt-3"
                          @bind-Value="model.Name" For="@(() => model.Name)" />
            <MudNumericField Label="Capacity" Class="mt-3"
                          @bind-Value="model.Capacity" For="@(() => model.Capacity)" />
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Update</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    [Parameter]
    public String Id { get; set; }

    private Guid _guidId;

    DiningTableResponse obj = new DiningTableResponse();
    UpdateDiningTableRequest model = new UpdateDiningTableRequest();

    protected override async void OnInitialized()
    {
        try
        {
            bool isValidGuid = Guid.TryParse(Id, out _guidId);
            if (!isValidGuid) throw new Exception("Id is invalid!");

            obj = await diningTableRepository.GetByIdAsync(_guidId);
            model.Name = obj.Name;
            model.Capacity = obj.Capacity;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            snackbar.Add(ex.Message, Severity.Error);
            GoBack();
        }
    }

    private async void Update()
    {
        try
        {
            await diningTableRepository.UpdateAsync(_guidId, model);
            snackbar.Add("Successfully update item.", Severity.Success);
            GoBack();
        }
        catch (Exception ex)
        {
            snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void GoBack()
    {
        navigationManager.NavigateTo(Routes.DiningTable);
    }
}
