@page "/role"

@inject HttpClient httpClient
@inject IBaseRepository<CreateRoleRequest, UpdateRoleRequest, RoleResponse> roleRepository
@inject NavigationManager navigationManager
@inject ISnackbar snackbar

<PageTitle>Role</PageTitle>

<MudTable @ref="_table" T="RoleResponse" Items="@Elements" Dense="@dense" Hover="@hover" Bordered="false" Striped="false"
          Filter="new Func<RoleResponse,bool>(FilterFunc1)" MultiSelection="false" SelectionChangeable="false" OnRowClick="OnRowClick" SelectOnRowClick="false">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Roles</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Code</MudTh>
        <MudTh>Name</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Code">@context.Code</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private bool dense = true;
    private bool hover = true;
    private string searchString = "";
    private MudTable<RoleResponse> _table;

    private IEnumerable<RoleResponse> Elements = new List<RoleResponse>();

    protected override async Task OnInitializedAsync()
    {
        LoadElements();
    }

    private async void LoadElements()
    {
        try
        {
            Elements = await roleRepository.GetAllAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private bool FilterFunc1(RoleResponse element) => FilterFunc(element, searchString);

    private bool FilterFunc(RoleResponse element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void OnRowClick(TableRowClickEventArgs<RoleResponse> args)
    {
        if (args.Item is not null)
        {
            navigationManager.NavigateTo($"{Routes.RoleUpdate}/{args.Item.Id}");
        }
    }
}
