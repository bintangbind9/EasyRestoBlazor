@page "/app-user/update/{Id}"

@inject HttpClient httpClient
@inject IBaseRepository<CreateAppUserRequest, UpdateAppUserRequest, AppUserResponse> appUserRepository
@inject IBaseRepository<CreateRoleRequest, UpdateRoleRequest, RoleResponse> roleRepository
@inject NavigationManager navigationManager
@inject ISnackbar snackbar

<PageTitle>Update App User</PageTitle>

<EditForm Model="@model" OnValidSubmit="Update">
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" aria-label="back" OnClick="GoBack" />
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Update App User</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField Label="Username"
                          @bind-Value="obj.Username" Disabled="true" />
            <MudTextField Label="Name" Class="mt-3"
                          @bind-Value="model.Name" For="@(() => model.Name)" />
            <MudTextField Label="Password" Class="mt-3"
                          @bind-Value="model.Password" For="@(() => model.Password)" />
            <MudCheckBox @bind-Value="model.IsActive" Class="mt-3">Active</MudCheckBox>
        </MudCardContent>
    </MudCard>
</EditForm>

<MudTable @ref="_roleTable" T="RoleResponse" Items="@roles" Dense="true" Hover="true" Bordered="false" Striped="false" Class="mt-4 mb-4"
          Filter="new Func<RoleResponse,bool>(FilterFunc1)" @bind-SelectedItems="selectedRoles" MultiSelection="true" SelectionChangeable="true" SelectOnRowClick="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Select Roles</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchRole" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Code</MudTh>
        <MudTh>Name</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Code">@context.Code</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<LoadingOverlay IsLoading="_isLoading" />

@code {
    [Parameter]
    public String Id { get; set; }
    private Guid _guidId;

    private bool _isLoading = false;

    AppUserResponse obj = new AppUserResponse();
    UpdateAppUserRequest model = new UpdateAppUserRequest();

    private string searchRole = "";
    private MudTable<RoleResponse> _roleTable;
    private HashSet<RoleResponse> selectedRoles = new HashSet<RoleResponse>();
    private IEnumerable<RoleResponse> roles = new List<RoleResponse>();

    protected override async void OnInitialized()
    {
        try
        {
            bool isValidGuid = Guid.TryParse(Id, out _guidId);
            if (!isValidGuid) throw new Exception("Id is invalid!");

            obj = await appUserRepository.GetByIdAsync(_guidId);
            model.Name = obj.Name;
            model.IsActive = obj.IsActive;

            LoadRoles();
            selectedRoles = obj.Roles.ToHashSet<RoleResponse>();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            snackbar.Add(ex.Message, Severity.Error);
            GoBack();
        }
    }

    private async void LoadRoles()
    {
        try
        {
            roles = await roleRepository.GetAllAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private bool FilterFunc1(RoleResponse element) => FilterFunc(element, searchRole);

    private bool FilterFunc(RoleResponse element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async void Update()
    {
        try
        {
            _isLoading = true;

            await appUserRepository.UpdateAsync(_guidId, model);
            snackbar.Add("Successfully update user.", Severity.Success);
            GoBack();
        }
        catch (Exception ex)
        {
            snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void GoBack()
    {
        navigationManager.NavigateTo(Routes.AppUser);
    }
}
