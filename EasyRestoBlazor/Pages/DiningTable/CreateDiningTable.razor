@page "/dining-table/create"

@inject HttpClient httpClient
@inject IBaseRepository<CreateDiningTableRequest, UpdateDiningTableRequest, DiningTableResponse> diningTableRepository
@inject NavigationManager navigationManager
@inject ISnackbar snackbar

<PageTitle>Create Dining Table</PageTitle>

<EditForm Model="@model" OnValidSubmit="Add">
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" aria-label="back" OnClick="GoBack" />
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Create Dining Table</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField Label="Code"
                          @bind-Value="model.Code" For="@(() => model.Code)" />
            <MudTextField Label="Name" Class="mt-3"
                          @bind-Value="model.Name" For="@(() => model.Name)" />
            <MudNumericField Label="Capacity"
                          @bind-Value="model.Capacity" For="@(() => model.Capacity)" />
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    CreateDiningTableRequest model = new CreateDiningTableRequest();

    private async void Add()
    {
        try
        {
            await diningTableRepository.CreateAsync(model);
            snackbar.Add("Successfully add item.", Severity.Success);
            GoBack();
        }
        catch (Exception ex)
        {
            snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void GoBack()
    {
        navigationManager.NavigateTo(Routes.DiningTable);
    }
}
